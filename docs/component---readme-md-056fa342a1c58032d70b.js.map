{"version":3,"sources":["webpack:///../README.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","align","href","src","parentName","isMDXComponent"],"mappings":"0eAMO,IAAMA,EAAe,Q,2LAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,mBAAKC,MAAM,UAAX,qBAEF,8CACA,uBAHE,qDAKF,uBACA,uBACE,iBAAGC,KAAK,gEACN,mBAAKC,IAAI,mGAGX,iBAAQ,CACN,GAAM,QADR,QAGA,uCAAsB,0BAAYC,WAAW,KAAvB,0BAAtB,yBACA,4BAAW,mBAAGA,WAAW,KAAQ,CAC7B,KAAQ,sDADD,0BAAX,iBAGS,sBAAQA,WAAW,KAAnB,kBAHT,oGAKA,yJAEA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,UAApB,2CACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,WAApB,4BAAqG,0BAAYA,WAAW,MAAvB,UAArG,qBACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,QAApB,4BAAkG,0BAAYA,WAAW,MAAvB,WAAlG,qBAEF,iBAAQ,CACN,GAAM,SADR,SAGA,2IAEA,6DACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,MACd,KAAO,IAHN,iWAkBL,iGACA,4FACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,MACd,KAAO,IAHN,umBA2BL,iBAAQ,CACN,GAAM,kBADR,kBAGA,oCAAmB,0BAAYA,WAAW,KAAvB,SACnB,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0EAIL,iBAAQ,CACN,GAAM,WADR,WAGA,6B,kLAKJP,EAAWQ,gBAAiB","file":"component---readme-md-056fa342a1c58032d70b.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/akorzunov/dev/Z/uiteam/lazyContainer/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <div align=\"center\">\nüßí - üë®‚Äçü¶± - üë®‚Äçü¶≥\n  <h1>Continuous Container</h1>\n  <br />\n  Something with known past, present, and the future \n  <br />\n  <br />\n    <a href=\"https://www.npmjs.com/package/@theuiteam/ContinuousContainer\">\n      <img src=\"https://img.shields.io/npm/v/@theuiteam/@theuiteam/ContinuousContainer.svg?style=flat-square\" />\n    </a>\n    </div>\n    <h2 {...{\n      \"id\": \"idea\"\n    }}>{`Idea`}</h2>\n    <p>{`This is almost `}<inlineCode parentName=\"p\">{`react transition group`}</inlineCode>{`, made differently...`}</p>\n    <p>{`Why `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/reactjs/react-transition-group\"\n      }}>{`react transition group`}</a>{`?\nBecause it `}<strong parentName=\"p\">{`keeps children`}</strong>{` after you remove them, to perform a fade animation,\nand we are going the same, but with state.`}</p>\n    <p>{`It's just about tracking what value \"would\" be, what is \"right now\", and what is \"was\".\nHowever, it's actually a bit inverted`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`future`}</inlineCode>{` - the next value. The value you given.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`present`}</inlineCode>{` - synchronized with the `}<inlineCode parentName=\"li\">{`future`}</inlineCode>{` one \"tick\" later`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`past`}</inlineCode>{` - synchronized with the `}<inlineCode parentName=\"li\">{`present`}</inlineCode>{` \"timeout\" later`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`Let's imagine you have a switch. Which controls visibility of something, but you\nalso want to add some animation.`}</p>\n    <p>{`Let's handle these cases separately:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\",\n        \"metastring\": \"jsx\",\n        \"jsx\": true\n      }}>{`const App = () => {\n  const [on, setOn] = useState(false);\n\n  return (\n    <div>\n      <button onClick={() => setOn(on => !on)}>Toggle</button>\n      // would be instanly hidden and shown\n      {on && <Content />}\n      // would be animated, but would be ALWAYS rendered\n      <ContentWithAnimation visible={on} />}\n    </div>\n  );\n};\n`}</code></pre>\n    <p>{`Now let's imagine you dont want to render Content when it's not visible.`}</p>\n    <p>{`Ok, \"when it's not visible\"? - AnimationTimeout after being hidden`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\",\n        \"metastring\": \"jsx\",\n        \"jsx\": true\n      }}>{`import {ContinuousContainer} from '@theuiteam/ContinuousContainer';\n\nconst App = () => {\n  const [on, setOn] = useState(false);\n\n  return (\n    <div>\n      <button onClick={() => setOn(on => !on)}>Toggle</button>\n\n      <ContinuousContainer value={on} timeout={300}>\n       {(past, present, future) =>\n       // display if it\n       // - was displayed <300ms ago\n       // - is displayed\n       // - would be displayed next time\n         (past || present || future) &&\n         <ContentWithAnimation visible={present}/>\n         // ^^ use the \"present\" value\n       )}\n    </div>\n  )\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"additional-api\"\n    }}>{`Additional API`}</h3>\n    <p>{`Of course a `}<inlineCode parentName=\"p\">{`hook`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const [past, present, future] = useContinuousState(value, timeout);\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"license\"\n    }}>{`License`}</h1>\n    <p>{`MIT`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}