{"version":3,"sources":["webpack:///../src/ContinuousContainer.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","of","ContinuousContainer","__position","__code","__scope","useState","Playground","Props","on","setOn","onClick","value","timeout","past","present","future","String","isMDXComponent"],"mappings":"4gBASO,IAAMA,EAAe,Q,6MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAK5E,iBAAQ,CACN,GAAM,wBADR,wBAGA,oDAAmC,kBAAIC,WAAW,KAAf,cAAnC,UACA,YAAC,IAAD,CAAOC,GAAIC,IAAqBH,QAAQ,UACxC,iBAAQ,CACN,GAAM,2BADR,2BAGA,2IAEA,8DACA,YAAC,IAAD,CAAYI,WAAY,EAAGC,OAAQ,kUAAmUC,QAAS,CAC7WP,QACAH,kBACAW,oBACAC,eACAC,UACAN,yBACCH,QAAQ,eACb,WAAM,MACoBO,oBAAS,GAAtBG,EADP,KACWC,EADX,KAEA,OAAO,uBACR,sBAAQC,QAAS,kBAAMD,GAAM,SAAAD,GAAE,OAAKA,OAApC,UAEA,mFAECA,GAAM,iCACLA,GAAM,sCAKX,uBACA,uBACA,iBAAQ,CACN,GAAM,8CADR,gDAGA,iGACA,wDAAsC,kBAAIT,WAAW,KAAf,oBAAtC,uBACA,YAAC,IAAD,CAAYG,WAAY,EAAGC,OAAQ,8gCAAmhCC,QAAS,CAC7jCP,QACAH,kBACAW,oBACAC,eACAC,UACAN,yBACCH,QAAQ,eACR,WAAM,MACeO,oBAAS,GAAtBG,EADF,KACMC,EADN,KAEL,OAAO,uBACT,sBAAQC,QAAS,kBAAMD,GAAM,SAAAD,GAAE,OAAKA,OAApC,UAEA,kGAEA,YAAC,IAAD,CAAqBG,MAAOH,EAAII,QAAS,IAAMd,QAAQ,wBACrD,SAACe,EAAMC,EAASC,GAAhB,OAA2B,gCAC1B,sBACE,gCAAYC,OAAOH,GAAnB,gCACA,mCAAeG,OAAOF,IACtB,kCAAcE,OAAOD,KAOhBF,GAAQC,GAAWC,EAAS,2BAAOD,EAAU,eAAiB,sBAA8B,0CAOxG,6CAA4B,0BAAYf,WAAW,KAAvB,UAA5B,uE,oMAKJJ,EAAWsB,gBAAiB","file":"component---src-continuous-container-mdx-ac8979f7a2f65d254853.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/akorzunov/dev/Z/uiteam/lazyContainer/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { useState } from 'react';\nimport { Playground, Props } from 'docz';\nimport { ContinuousContainer } from './ContinuousContainer';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"continuous-container\"\n    }}>{`Continuous Container`}</h1>\n    <p>{`Renderless container with a `}<em parentName=\"p\">{`Continuous`}</em>{` State`}</p>\n    <Props of={ContinuousContainer} mdxType=\"Props\" />\n    <h1 {...{\n      \"id\": \"common-case---yes-or-no\"\n    }}>{`Common case - YES or NO`}</h1>\n    <p>{`Let's imagine you have a switch. Which controls visibility of something, but you\nalso want to add some animation.`}</p>\n    <p>{`Let's handle these cases separately: `}</p>\n    <Playground __position={1} __code={'() => {\\n  const [on, setOn] = useState(false)\\n\\n  return (\\n    <div>\\n      <button onClick={() => setOn(on => !on)}>Toggle</button>\\n\\n      <p>\\n        the following content would be __instanly__ hidden or shown\\n        {on && <div>shown</div>}\\n        {!on && <div>hidden</div>}\\n      </p>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      Props,\n      ContinuousContainer\n    }} mdxType=\"Playground\">\n {() => {\n        const [on, setOn] = useState(false);\n        return <div>\n       <button onClick={() => setOn(on => !on)}>Toggle</button>\n       \n       <p>\n        the following content would be __instanly__ hidden or shown\n       {on && <div>shown</div>}\n       {!on && <div>hidden</div>}\n       </p>               \n     </div>;\n      }}\n    </Playground>\n    <br />\n    <br />\n    <h1 {...{\n      \"id\": \"improved-case---yesnowas-just-a-second-ago\"\n    }}>{`Improved case - YES/NO/WAS JUST A SECOND AGO`}</h1>\n    <p>{`Now let's imagine you dont want to render Content when it's not visible.`}</p>\n    <p>{`Ok, \"when it's not visible\"? - `}<em parentName=\"p\">{`AnimationTimeout`}</em>{` after being hidden`}</p>\n    <Playground __position={3} __code={'() => {\\n  const [on, setOn] = useState(false)\\n\\n  return (\\n    <div>\\n      <button onClick={() => setOn(on => !on)}>Toggle</button>\\n\\n      <p>\\n        the following content would be __instanly__ shown, but hidden in a\\n        timeout\\n        <ContinuousContainer value={on} timeout={3000}>\\n          {(past, present, future) => (\\n            <>\\n              <ul>\\n                <li>past - {String(past)} - going to be delayed by 3s</li>\\n                <li>present - {String(present)}</li>\\n                <li>future - {String(future)}</li>\\n              </ul>\\n\\n              {// display if it\\n              // - was displayed <300ms ago\\n              // - is displayed\\n              // - would be displayed next tick\\n\\n              past || present || future ? (\\n                <div> {present ? \\'is shown now\\' : \\'still have to show\\'}</div>\\n              ) : (\\n                <div>hidden</div>\\n              )}\\n            </>\\n          )}\\n        </ContinuousContainer>\\n      </p>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      Props,\n      ContinuousContainer\n    }} mdxType=\"Playground\">\n      {() => {\n        const [on, setOn] = useState(false);\n        return <div>\n      <button onClick={() => setOn(on => !on)}>Toggle</button>\n      \n      <p>\n         the following content would be __instanly__ shown, but hidden in a timeout\n      <ContinuousContainer value={on} timeout={3000} mdxType=\"ContinuousContainer\">       \n       {(past, present, future) => <>         \n         <ul>\n           <li>past - {String(past)} - going to be delayed by 3s</li>\n           <li>present - {String(present)}</li>\n           <li>future - {String(future)}</li>\n         </ul>\n         \n         {// display if it\n                // - was displayed <300ms ago\n                // - is displayed\n                // - would be displayed next tick\n                past || present || future ? <div> {present ? 'is shown now' : 'still have to show'}</div> : <div>hidden</div>}         \n       </>}\n       </ContinuousContainer>\n       </p>\n    </div>;\n      }}\n    </Playground>\n    <p>{`You dont have to use `}<inlineCode parentName=\"p\">{`future`}</inlineCode>{` in all the cases. You will figure out the right cases by your own`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}